// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid())
  email        String         @unique
  name         String?
  type         UserType?
  password     String
  surname      String?
  role         Role?          @relation(fields: [roleId], references: [id])
  roleId       String?
  avatarUrl    String
  mission      Mission[]      @relation("driverUser")
  DriverProfil DriverProfil[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  createdMission   Mission[] @relation("userCreate")

  @@map("user")
}

model Role {
  id          String @id @default(uuid())
  name        String
  description String

  user User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("role")
}

model Opportunite {
  id          String   @id @default(uuid())
  description String
  address     Address  @relation(fields: [addressId], references: [id])
  addressId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("opportunite")
}

model Address {
  id        String  @id @default(uuid())
  country   String
  city      String
  quater    String?
  order     Int?
  Opportunite Opportunite[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Mission     Mission?      @relation(fields: [missionId], references: [id])
  incident    Incident?     @relation(fields: [incidentId], references: [id])
  incidentId  String
  missionId   String?

  @@map("address")
}

model Vehicles {
  id               String   @id @default(uuid()) 
  name             String
  type             String
  immatriculation  String @unique
  state            String
  model            String
  tonnage          Int
  firstYearTakeoff DateTime
  address          String

  maintenances Maintenance[]
  marchandise  Marchandise[]
  missions     Mission[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("vehicles")
}

model Maintenance {
  id              String   @id @default(uuid())
  name            String
  type            String
  maintenanceDate DateTime
  vehicle         Vehicles @relation(fields: [vehicleId], references: [id])
  vehicleId       String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("maintenance")
}

model Marchandise {
  id            String     @id @default(uuid())
  type          String
  name          String
  quantity      Int
  transitNumber Int
  volume        Decimal
  volumeUnit    VolumeUnit
  vehicle       Vehicles   @relation(fields: [vehicleId], references: [id])
  vehicleId     String
  note          Note[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt


  @@map("marchandise")
}

enum UserType {
  SUPERADMIN
  ADMIN
  CHAUFFEUR
}

enum VolumeUnit {
  CM3
  CBM
  LITRES
  M3
}

model Mission {
  id           String        @id @default(uuid())
  description  String
  dateStart    DateTime
  driver       User          @relation("driverUser", fields: [driverid], references: [id])
  driverid     String
  vehicle      Vehicles      @relation(fields: [vehicleid], references: [id])
  vehicleid    String
  status       MissionStatus
  dateFinish   DateTime
  userCreate   User          @relation("userCreate", fields: [userCreateId], references: [id])
  userCreateId String
  journey      Address[]
  Incident     Incident[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt


  @@map("mission")
}

enum MissionStatus {
  IN_COMMING
  CURRENTLY
  FINISH
}

model Note {
  id            String       @id @default(uuid())
  description   String
  Marchandise   Marchandise? @relation(fields: [marchandiseId], references: [id])
  marchandiseId String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@map("note")
}

model DriverProfil {
  id                     String   @id @default(uuid())
  DrivingLicense          String
  ImmatriculationNumber  String
  DateOfBirth            DateTime
  DrivingLicenseRectoUrl String?
  DrivingLicenseVersoUrl String?
  User                   User     @relation(fields: [UserId], references: [id])
  UserId                 String
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@map("driverprofil")
}

model Incident {
  id          String    @id @default(uuid())
  description String
  address     Address[]
  mission     Mission   @relation(fields: [missionId], references: [id])
  missionId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("incident")
}
